"use strict";

//Создание функции начинается со слова function.
//Даем имя функции showFirstMessage.
//Желательно чтобы начиналось с глагола.
//В круглых скобках () передаем аргументы.
//Передадим в нее аргумент с именем text.
//Внутри {} выполняются какие то действия.
function showFirstMessage(text){
    //Например, при старте функции выведем сообщение
    console.log("Hello World! " + text);
}

//Используем нашу функцию. Вызовем ее.
// showFirstMessage();
showFirstMessage("Hello Friends!");

//Есть такое понятие, как анонимные функции.
//Анонимные функции - функции без имени и вызываются и 
//используются они здесь и сейчас.

function showMessage(text){
    //Например, при старте функции выведем сообщение
    console.log("Hello World! " + text);
    //Эта переменная за пределами функции НЕ БУДЕТ ВИДНА!!!
    //Это локальная переменная.
    let num = 20;

}

//Изменение глобальной переменной внутри функции
let numm = 30;

function showMess(text){
    console.log(text);
    numm = 20;
    console.log(numm); //20
    
}

showMess("Hi!"); //Hi!
console.log(numm); //20

//Глобальная и Локальная переменная
let num3 = 30;

function showMes(text){
    console.log(text);
    let num3 = 20;
    console.log(num3); //20
    
}

showMes("Hi boy!"); //Hi!
console.log(num3); //30

//Замыкание функции - это сама функция вместе со всеми внешними
//переменными, которые ей доступны.

//Глобальная и обращение к ней из функции.
//Т.е. если мы обращаемся к переменной внутри функции,
//то ф-ция сначала ищет эту переменную внутри себя, и если не
//находит, то переходит на уровень выше, если там не находит, то
//переходит еще на уровень выше и т.д.
let num4 = 30;

function showMe(text){
    console.log(text);
    console.log(num4); //30 
    
}

showMe("Hi boy!"); //Hi!
console.log(num4); //30

//Возврат функцией какого то значения наружу.
function calc (a, b){
    return (a + b);
    //как и в java после return код уже не выполнятся
}
//когда запустим эту ф-цию, то она вернет нам 
//сумму первого и второго аргумента
console.log(calc(5, 6));
console.log(calc(7, 9));
console.log(calc(22, 12));

//
function ret() {
    let num = 50;
    // Здесь может идти блок кода

    return num; //во внешний мир будет возвращено значение переменной num
}
//сохраним возвращенное значение в другую переменную
const anotherNum = ret();
console.log(anotherNum); //50

//##### Классификация функции: #####
//Function Declaration
//Классическая запись функции.
//Создается до начала выполнения скрипта, 
//можно вызвать перед объявлением. Т.е. она существует еще до того
//как наш код запустится.
//Это происходит, т.к. когда браузер подгружает наш скрипт, то он
//пробегает по всему коду и ищет переменные var и Function Declaration.,
//запоминает их. А потом уже запускает код.
//В этом есть свой плюс. Мы можем запустить ф-цию до написания ее в коде.
//Т.е. ф-ция работает еще до того как о нее дошел код.
//Можно все функции поместить вниз файла, а вверху их использовать.
function foo1() {
    //какой то код
}

//Function Expression
//Функциональное выражение.
//Создается только тогда, когда доходит поток кода, можно вызвать
//только после объявления.
let foo2 = function() {
    //какой то код
};

const logger = function(){
    console.log("Hello!");
};
//Вызов этого функционального выражения производим так:
logger();

//Стрелочные функции
//Были добавлены в 2015 году в стандарте ES6
//Не имеет своего контекста (this)
//()=>
//Это значит что мы создаем переменную, в которую помещаем ф-цию

const calculator = (a, b) => a + b;

//У этой стрелочной ф-ции есть свои особенности и везде использовать ее
//нельзя

const calc2 = (a, b) => {
    console.log("Работает стрелочная функция")
    return (a + b);
};
console.log(calc2(1,2,));

/* Примеры синтаксиса стрелочной ф-ции:
(param1, param2, …, paramN) => { statements }
(param1, param2, …, paramN) => expression
// эквивалентно: (param1, param2, …, paramN) => { return expression; }

// Круглые скобки не обязательны для единственного параметра:
(singleParam) => { statements }
singleParam => { statements }

// Функция без параметров нуждается в круглых скобках:
() => { statements }
() => expression 
// Эквивалентно: () => { return expression; }
*/

